(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_pink-noise-node_index_js"],{

/***/ "./node_modules/pink-noise-node/index.js":
/*!***********************************************!*\
  !*** ./node_modules/pink-noise-node/index.js ***!
  \***********************************************/
/***/ ((module) => {

var noiseData = new Float32Array(44100 * 5);
var noiseBuffer = null;

// http://noisehack.com/generate-noise-web-audio-api/
var b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;

for (var i = 0, imax = noiseData.length; i < imax; i++) {
  var white = Math.random() * 2 - 1;

  b0 = 0.99886 * b0 + white * 0.0555179;
  b1 = 0.99332 * b1 + white * 0.0750759;
  b2 = 0.96900 * b2 + white * 0.1538520;
  b3 = 0.86650 * b3 + white * 0.3104856;
  b4 = 0.55000 * b4 + white * 0.5329522;
  b5 = -0.7616 * b5 - white * 0.0168980;

  noiseData[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
  noiseData[i] *= 0.11;
  b6 = white * 0.115926;
}

function PinkNoiseNode(audioContext) {
  if (noiseBuffer === null) {
    noiseBuffer = audioContext.createBuffer(1, noiseData.length, audioContext.sampleRate);
    noiseBuffer.getChannelData(0).set(noiseData);
  }
  var bufferSource = audioContext.createBufferSource();

  bufferSource.buffer = noiseBuffer;
  bufferSource.loop = true;

  return bufferSource;
}

PinkNoiseNode.install = function() {
  Object.defineProperty(AudioContext.prototype, "createPinkNoise", {
    value: function() {
      return new PinkNoiseNode(this);
    },
    enumerable: false, writable: false, configurable: true
  });
};

module.exports = PinkNoiseNode;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3Bpbmstbm9pc2Utbm9kZV9pbmRleF9qczY2ZDE5MTQwNmY2ODg4YTdkZDY2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlDQUF5QyxVQUFVO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bpbmstbm9pc2Utbm9kZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9pc2VEYXRhID0gbmV3IEZsb2F0MzJBcnJheSg0NDEwMCAqIDUpO1xudmFyIG5vaXNlQnVmZmVyID0gbnVsbDtcblxuLy8gaHR0cDovL25vaXNlaGFjay5jb20vZ2VuZXJhdGUtbm9pc2Utd2ViLWF1ZGlvLWFwaS9cbnZhciBiMCA9IDAsIGIxID0gMCwgYjIgPSAwLCBiMyA9IDAsIGI0ID0gMCwgYjUgPSAwLCBiNiA9IDA7XG5cbmZvciAodmFyIGkgPSAwLCBpbWF4ID0gbm9pc2VEYXRhLmxlbmd0aDsgaSA8IGltYXg7IGkrKykge1xuICB2YXIgd2hpdGUgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG5cbiAgYjAgPSAwLjk5ODg2ICogYjAgKyB3aGl0ZSAqIDAuMDU1NTE3OTtcbiAgYjEgPSAwLjk5MzMyICogYjEgKyB3aGl0ZSAqIDAuMDc1MDc1OTtcbiAgYjIgPSAwLjk2OTAwICogYjIgKyB3aGl0ZSAqIDAuMTUzODUyMDtcbiAgYjMgPSAwLjg2NjUwICogYjMgKyB3aGl0ZSAqIDAuMzEwNDg1NjtcbiAgYjQgPSAwLjU1MDAwICogYjQgKyB3aGl0ZSAqIDAuNTMyOTUyMjtcbiAgYjUgPSAtMC43NjE2ICogYjUgLSB3aGl0ZSAqIDAuMDE2ODk4MDtcblxuICBub2lzZURhdGFbaV0gPSBiMCArIGIxICsgYjIgKyBiMyArIGI0ICsgYjUgKyBiNiArIHdoaXRlICogMC41MzYyO1xuICBub2lzZURhdGFbaV0gKj0gMC4xMTtcbiAgYjYgPSB3aGl0ZSAqIDAuMTE1OTI2O1xufVxuXG5mdW5jdGlvbiBQaW5rTm9pc2VOb2RlKGF1ZGlvQ29udGV4dCkge1xuICBpZiAobm9pc2VCdWZmZXIgPT09IG51bGwpIHtcbiAgICBub2lzZUJ1ZmZlciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoMSwgbm9pc2VEYXRhLmxlbmd0aCwgYXVkaW9Db250ZXh0LnNhbXBsZVJhdGUpO1xuICAgIG5vaXNlQnVmZmVyLmdldENoYW5uZWxEYXRhKDApLnNldChub2lzZURhdGEpO1xuICB9XG4gIHZhciBidWZmZXJTb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cbiAgYnVmZmVyU291cmNlLmJ1ZmZlciA9IG5vaXNlQnVmZmVyO1xuICBidWZmZXJTb3VyY2UubG9vcCA9IHRydWU7XG5cbiAgcmV0dXJuIGJ1ZmZlclNvdXJjZTtcbn1cblxuUGlua05vaXNlTm9kZS5pbnN0YWxsID0gZnVuY3Rpb24oKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb0NvbnRleHQucHJvdG90eXBlLCBcImNyZWF0ZVBpbmtOb2lzZVwiLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBQaW5rTm9pc2VOb2RlKHRoaXMpO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaW5rTm9pc2VOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9