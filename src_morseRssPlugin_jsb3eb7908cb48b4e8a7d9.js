"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_morseRssPlugin_js"],{

/***/ "./src/morseRssPlugin.js":
/*!*******************************!*\
  !*** ./src/morseRssPlugin.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MorseRssPlugin)
/* harmony export */ });
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MorseRssPlugin = /*#__PURE__*/_createClass(function MorseRssPlugin() {
  _classCallCheck(this, MorseRssPlugin);
});

_defineProperty(MorseRssPlugin, "addRssFeatures", function (ko, ctxt) {
  ctxt.rssFeedUrl = ko.observable('https://moxie.foxnews.com/feedburner/latest.xml').extend({
    saveCookie: 'rssFeedUrl'
  });
  ctxt.proxydUrl = ko.observable('http://127.0.0.1:8085/').extend({
    saveCookie: 'proxydUrl'
  });
  ctxt.rssPlayMins = ko.observable(5).extend({
    saveCookie: 'rssPlayMins'
  });
  ctxt.rssPollMins = ko.observable(5).extend({
    saveCookie: 'rssPollMins'
  });
  ctxt.rssTitlesQueue = ko.observableArray();
  ctxt.rssPlayOn = ko.observable(false);
  ctxt.lastRSSPoll = ko.observable(new Date(1900, 0, 0));
  ctxt.rssPlayTimerHandle = null;
  ctxt.rssPollTimerHandle = null;
  ctxt.rssMinsToWait = ko.observable(-1);
  ctxt.rssPollMinsToWait = ko.observable(-1);
  ctxt.rssPollingOn = ko.observable(false);
  ctxt.rssPolling = ko.observable(false);
  ctxt.rssPlayWaitingBadgeText = ko.observable(true);
  ctxt.unreadRssCount = ko.computed(function () {
    var unread = ctxt.rssTitlesQueue().filter(function (x) {
      return !x.played;
    }); // console.log("unread:");
    // console.log(unread);

    return !unread ? 0 : unread.length;
  }, ctxt);
  ctxt.playRssButtonText = ko.computed(function () {
    var minsToWait = ctxt.rssMinsToWait();
    var waitingText = '';

    if (minsToWait > 0 && ctxt.rssPlayOn()) {
      waitingText = ' Waiting ';

      if (minsToWait > 1) {
        waitingText += Math.round(minsToWait).toString() + ' min';
      } else {
        waitingText += Math.round(60 * minsToWait).toString() + ' sec';
      }
    } // help the badge


    console.log(waitingText);
    ctxt.rssPlayWaitingBadgeText(waitingText);
    return (ctxt.rssPlayOn() ? 'Stop' : 'Play') + ' RSS (' + ctxt.unreadRssCount() + ')' + waitingText;
  }, ctxt);
  ctxt.pollRssButtonText = ko.computed(function () {
    var minsToWait = ctxt.rssPollMinsToWait();
    var waitingText = '';

    if (minsToWait > 0 && ctxt.rssPollingOn()) {
      waitingText = ' Waiting ';

      if (minsToWait > 1) {
        waitingText += Math.round(minsToWait).toString() + ' min';
      } else {
        waitingText += Math.round(60 * minsToWait).toString() + ' sec';
      }
    }

    return (ctxt.rssPollingOn() ? 'Polling' : 'Poll') + ' RSS' + waitingText;
  }, ctxt);

  ctxt.rssPlayCallback = function (ignoreWait) {
    if (ctxt.rssPlayOn()) {
      var msSince = Date.now() - ctxt.lastFullPlayTime();
      var minSince = msSince / 1000 / 60;
      var enoughWait = minSince > ctxt.rssPlayMins();

      if (!ctxt.playerPlaying()) {
        if (enoughWait || ignoreWait) {
          ctxt.rssMinsToWait(-1);

          if (ctxt.unreadRssCount() > 0) {
            var target = ctxt.rssTitlesQueue().find(function (x) {
              return !x.played;
            });
            var replacement = {
              title: target.title,
              played: true
            };
            ctxt.rssTitlesQueue.replace(target, replacement);
            ctxt.setText(target.title);
            ctxt.fullRewind();
            ctxt.doPlay();
          }
        } else {
          ctxt.rssMinsToWait(ctxt.rssPlayMins() - minSince);
        }
      }

      ctxt.rssPlayTimerHandle = setTimeout(ctxt.rssPlayCallback, 20 * 1000);
    }
  };

  ctxt.doRSSReset = function () {
    ctxt.rssTitlesQueue(ctxt.rssTitlesQueue().map(function (x) {
      x.played = true;
      return x;
    }));
  };

  ctxt.doRssPlay = function () {
    ctxt.rssPlayOn(!ctxt.rssPlayOn());

    if (ctxt.rssPlayOn()) {
      ctxt.rssPlayCallback(true);
    } else {
      if (ctxt.rssPlayTimerHandle) {
        clearTimeout(ctxt.rssPlayTimerHandle);
      }
    }
  };

  ctxt.doRSSCallback = function () {
    if (ctxt.rssPollingOn() && !ctxt.rssPolling()) {
      var msSince = Date.now() - ctxt.lastRSSPoll();
      var minSince = msSince / 1000 / 60;
      var enoughWait = minSince > ctxt.rssPollMins();

      if (enoughWait) {
        ctxt.rssPolling(true);
        ctxt.rssPollMinsToWait(-1); // https://github.com/rbren/rss-parser
        // ctxt helped resolve polyfill problems:
        // https://blog.alchemy.com/blog/how-to-polyfill-node-core-modules-in-webpack-5
        // note that the rss-parser module is loaded dynamically, so only if the
        // user actually goes ahead and uses RSS.

        Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_rss-parser_index_js"), __webpack_require__.e("_ed1b-_d17e")]).then(__webpack_require__.t.bind(__webpack_require__, /*! rss-parser */ "./node_modules/rss-parser/index.js", 23)).then(function (_ref) {
          var RSSParser = _ref["default"];
          var parser = new RSSParser(); // Note: some RSS feeds can't be loaded in the browser due to CORS security.
          // To get around ctxt, you can use a proxy.

          parser.parseURL(ctxt.proxydUrl() + ctxt.rssFeedUrl().toString(), function (err, feed) {
            if (err) {
              ctxt.lastRSSPoll(Date.now());
              alert('rss error');
              ctxt.rssPolling(false);
              throw err;
            } // console.log(feed.title);
            // note the reversal to get a fifo


            feed.items.reverse().forEach(function (entry) {
              // console.log(entry.title + ':' + entry.link);
              if (!ctxt.rssTitlesQueue().find(function (x) {
                return x.title === entry.title;
              })) {
                ctxt.rssTitlesQueue.push({
                  title: entry.title,
                  played: false
                });
              }
            });
            ctxt.lastRSSPoll(Date.now());
            ctxt.rssPollMinsToWait(ctxt.rssPollMins());
            ctxt.rssPolling(false);
          });
        });
      } else {
        ctxt.rssPollMinsToWait(ctxt.rssPollMins() - minSince);
      }
    }

    if (ctxt.rssPollingOn()) {
      ctxt.rssPollTimerHandle = setTimeout(ctxt.doRSSCallback, 15 * 1000);
    } else {
      if (ctxt.rssPollTimerHandle) {
        clearTimeout(ctxt.rssPollTimerHandle);
      }
    }
  };

  ctxt.doRSS = function () {
    ctxt.rssPollingOn(!ctxt.rssPollingOn());

    if (ctxt.rssPollingOn()) {
      ctxt.doRSSCallback();
    } else {
      if (ctxt.rssPollTimerHandle) {
        clearTimeout(ctxt.rssPollTimerHandle);
      }
    }
  };
});



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,